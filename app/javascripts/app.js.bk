// Import the page's CSS. Webpack will know what to do with it.
import "../stylesheets/app.css";

// Import libraries we need.
import { default as Web3} from 'web3';
import { default as contract } from 'truffle-contract'
import headquarter_artifacts from '../../build/contracts/TransportHeadquarter.json'
import center_artifacts from '../../build/contracts/TransportCenter.json'

// MetaCoin is our usable abstraction, which we'll use through the code below.
var TransportHeadquarter = contract(headquarter_artifacts);
var TransportCenter = contract(center_artifacts);

// The following code is simple to show off interacting with your contracts.
// As your needs grow you will likely need to change its form and structure.
// Foe application bootstrapping, check out window.addEventListener below.

var accounts;
var account;

window.App = {

    deployCenters: function(howmany) {
    var self = this;
    var headquarter;
    TransportHeadquarter.deployed().then(function(instance) {
      //create instance of all centers
      var i;
      //document.write(instance.address);
      //document.write(account);
      for (i = 0; i < howmany; i++) {
        //instance.mintTransportCenter(10,{from: account, gas: 344000000}).catch(function(f) {document.write("web3 cmn")});
        //instance.mintTransportCenter(11,{from:account}).then(function(f) {document.write(f);});
      }
    });

  },

    start: function() {
    var self = this;
    // Bootstrap the MetaCoin abstraction for Use.
    TransportHeadquarter.setProvider(web3.currentProvider);
    TransportCenter.setProvider(web3.currentProvider);
    web3.eth.getAccounts(function(err, accs) {
      if (err != null) {
        alert("There was an error fetching your accounts.");
        return;
      }

      if (accs.length == 0) {
        alert("Couldn't get any accounts! Make sure your Ethereum client is configured correctly.");
        return;
      }
      accounts = accs;
      account = accounts[0];
  })
    this.deployCenters(10);
}
};


window.addEventListener('load', function() {

 // Checking if Web3 has been injected by the browser (Mist/MetaMask)

 if (typeof web3 !== 'undefined') {

  console.warn("Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask")

  // Use Mist/MetaMask's provider

  window.web3 = new Web3(web3.currentProvider);

 } else {

  console.warn("No web3 detected. Falling back to http://localhost:8545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask");

  // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)

  window.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:9545"));

 }

 App.start();

});


